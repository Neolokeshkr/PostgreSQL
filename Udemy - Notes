Operators in Postgres:
	+,-,*,/,^,@

String Operators and Functions:

	|| - Join two strings
		=# SELECT 'Lokesh'||' '||'Kumar' AS NAME;
	CONCAT() - Join two Strings 
		=# SELECT CONCAT('Lokesh ','Kumar');
	LOWER() - Gives a lower case string
		=# SELECT LOWER('LOKESH KUMAR');
	LENGTH() - Gives length of the string
		=# SELECT LENGTH('LOKESH KUMAR');
	UPPER() - Gives a lower case string
		=# SELECT UPPER('lokesh kumar');

Comparison Math Operators:
	
	BETWEEN - Is the value between other two values?
		=# SELECT * FROM table WHERE column BETWEEN val1 AND val2;
	NOT IN - Is the value NOT present in a list?
		=# SELECT name FROM table WHERE name NOT IN ('listItem1','listItem2', ...);

	IN - Is the value present in the list?
		=# SELECT name FROM table WHERE name IN ('listItem1','listItem2', ...);
	
Relationships in Databases:

	1. One to Many Relationship
		-Always look for "has many" in a relationship.
		Eg 1. A facebook user has many photos.

	2. Many to One relationship
		Eg : 1. Various photos belong to a single user.

	3. One to One relationship
		Eg 	1. Ship <----> Captain
			2. Company <---> CEO
			3. Person <---> Driving License

	4. Many to Many Relationships;
		Eg	1. Students <---> Classes
			2. Movies <---> Actors

Keys in PostgreSQL:

	1. Primary Key : Uniquely identify a single record in a table.
		Eg : 	CREATE TABLE users (
				id SERIAL PRIMARY KEY,
				username VARCHAR(50) 
			);
	
	2. Foreign Key : Identifies a record usually in another table.
		Eg :	CREATE TABLE photos(
				id SERIAL PRIMARY KEY,
				url VARCHAR(200),
				user_id INTEGER REFERENCES users_udemy(id))
			);
	
	3. Join Query:
		Eg : SELECT * FROM users JOIN photos ON users.id = photos.user_id;
	
	4. DELETE Keyword
		Eg: 	DELETE FROM users WHERE id=1;
		
		On Delete Options (when a user is deleted):
		1. ON DELETE RESTRICT 	- Default Option|Throws Error
		2. ON DELETE NO ACTION 	- Throws Error

		3. ON DELETE CASCADE	- Deletes the photos too.
			Eg : 	CREATE TABLE photos_udemy (
					id SERIAL PRIMARY KEY,
					url VARCHAR(200),
					user_id INTEGER REFERENCES users_udemy(id) ON DELETE CASCADE
				);

		4. ON DELETE SET NULL	- Set user_id of photo to null
			Eg : 	CREATE TABLE photos_udemy (
					id SERIAL PRIMARY KEY,
					url VARCHAR(200),
					user_id INTEGER REFERENCES users_udemy(id) ON DELETE SET NULL
		);

		5. ON DELETE SET DEFAULT- Set user_id of photo to a default value,(if provided).

JOINS And Aggregation:
	
	Joins
	
		1. Joins are used when we are asked to find values across different resources/tables.
		2. Produces values by merging together rows from different tables.
		3. Four Types OF Joins:
			1. INNER JOIN OR JOIN
			2. LEFT OUTER JOIN
			3. RIGHT OUTER JOIN
			4. FULL JOIN

		Eg: 	SELECT content AS Comment, url
			FROM photos
			JOIN comments ON photos.id=comments.photo_id;

			SELECT p.id AS photo_id, c.id AS comment_id
			FROM photos AS p
			JOIN comments AS c ON p.id = c.photo_id;

		4. Right, Left and Full Joins displat NULL values if values are not available in any of the columns.
		5. Joins can be better understood using Venn Diagrams.

	Aggregation
		1. Produces/Creates a single result by looking at differet rows.
		2. Words like most average and least are a sign that we need to use aggregation.

		Types of aggregate functions:
		1. COUNT()
			-NULL values are not counted in columns.
			-SELECT COUNT(*) FROM comments;
		2. SUM()
		3. AVERAGE()
		4. MIN()
		5. MAX()

	1. GROUP BY
		-One can only select the grouped column;
		Eg: SELECT user_id FROM comments_id;

		-In order to choose the underlying columns we need to use the aggregate functions.
		Eg: 
			SELECT user_id, COUNT(content) AS total_comts 
			FROM comments 
			GROUP BY user_id;
	
			SELECT user_id, MAX(LENGTH(content)) AS maxLen
			FROM comments 
			GROUP BY user_id
			
		-It is a good practice to use COUNT(*) rather than referencing a column. This saves us from the possibility of not counting any record having NULL value.	

			SELECT user_id, COUNT(*) AS total_Photos
			FROM photos
			GROUP BY user_id;

	1.1. HAVING
		-HAVING will be always used with GROUP BY.
		-Use to do more filtering on GROUP BY.

			SELECT photo_id, COUNT(*)
			FROM comments
			WHERE photo_id <= 3
			GROUP BY photo_id
			HAVING COUNT(*) > 2 

			SELECT user_id, COUNT(*)
			FROM comments
			WHERE photo_id <= 50
			GROUP BY user_id
			HAVING COUNT(*) > 20;

	Sorting	
	1. ORDER BY
		-Used to sort records in ascending or descending order.
		-Can be applied both to numbers and alphabets.
		-Can be applied to one or more records.
		
		Types:
		1.1 ORDER BY cn || ORDER BY cn ASC - default ascending
		1.2 ORDER BY cn DESC - descending order

		Eg:	SELECT * FROM products ORDER BY price;
					OR
			SELECT * FROM products ORDER BY price ASC;
	
			SELECT * FROM products ORDER BY price DESC;
			SELECT * FROM products ORDER BY price,weight;

	OFFSET and LIMIT
	1. OFFSET
		-Used to skip a number of records from the beginning.
		Eg :	SELECT * FROM products OFFSET 50;
	2. LIMIT 
		-Used to look for a limited number of records from the beginning.
		Eg : SELECT * FROM PRODUCTS LIMIT 50;
	3. OFFSET AND LIMIT TOGETHER
		-In case of using offset and limit together always place the LIMIT keyword before OFFSET (by convention)
		Eg : SELECT * FROM products LIMIT 10 OFFSET 50;

	ORDER BY, LIMIT, OFFSET
		Eg : SELECT * FROM products ORDER BY price LIMIT 10 OFFSET 1;

	UNION
	1. UNION	
		- Union is used to join the result of two queries together.
		- It doesnot display any duplicate records if it is present in both of the queries.
		Eg : (
			SELECT * 
			FROM products 
			ORDER BY price/weight DESC 
			LIMIT 4 
		)
		UNION
		(
			SELECT * 
			FROM products 
			ORDER BY price DESC 
			LIMIT 4
		);

	2. UNION ALL
		- It is used it is necessary to display duplicate records.

	INTERSECT
	1. INTERSECT 
		-Displays the rows/records which are present in two differnt query resut sets.
		Eg : (
			SELECT * 
			FROM products 
			ORDER BY price/weight DESC 
			LIMIT 4 
		)
		INTERSECT
		(
			SELECT * 
			FROM products 
			ORDER BY price DESC 
			LIMIT 4
		);
		
	2. INTERSECT ALL
		-Displays the rows/records once for each pair of common records present in different query result sets.

	EXCEPT
	1. EXCEPT
		-Compares the result of first query with second query and remove common rows/records and display remaining results.
		-Eg : (
			SELECT * 
			FROM products 
			ORDER BY price/weight DESC 
			LIMIT 4 
		)
		EXCEPT
		(
			SELECT * 
			FROM products 
			ORDER BY price DESC 
			LIMIT 4
		);
